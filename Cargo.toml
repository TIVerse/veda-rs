[package]
name = "veda-rs"
version = "1.0.0"
edition = "2021"
authors = ["Eshan Roy <eshanized@proton.me>"]
description = "High-performance parallel runtime for Rust with work-stealing and adaptive scheduling"
license = "MIT OR Apache-2.0"
repository = "https://github.com/TIVerse/veda-rs"
readme = "README.md"
documentation = "https://docs.rs/veda-rs"
keywords = [
    "parallel", 
    "concurrency",
    "work-stealing", 
    "thread-pool",
    "data-parallelism"
]
categories = [
    "concurrency", 
    "asynchronous", 
    "data-structures",
    "algorithms"
]

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
# Core concurrency
crossbeam-deque = "0.8"
crossbeam-utils = "0.8"
crossbeam-channel = "0.5"
num_cpus = "1.16"

# Async support (optional)
futures = { version = "0.3", optional = true }
async-channel = { version = "2.0", optional = true }

# GPU support (optional)
wgpu = { version = "0.19", optional = true }

# Telemetry (optional)
hdrhistogram = { version = "7.5", optional = true }

# Serialization for deterministic mode and telemetry export
serde = { version = "1.0", features = ["derive"] }
serde_json = { version = "1.0" }

# Random number generation (required for work stealing)
rand = "0.8"
rand_pcg = { version = "0.3", optional = true }

# Error handling
thiserror = "1.0"

# Parking for thread synchronization
parking_lot = "0.12"

# NUMA support (Linux-specific)
[target.'cfg(target_os = "linux")'.dependencies]
libnuma = { version = "0.0.4", optional = true }
libc = "0.2"

[dev-dependencies]
criterion = "0.7"
tokio = { version = "1.35", features = ["full"] }
rayon = "1.8"
proptest = "1.4"

[features]
# Core features
default = ["adaptive", "telemetry"]

## Basic Features
adaptive = []  # Enable adaptive scheduling (on by default)

## Advanced Features
deterministic = ["rand_pcg"]  # Enable deterministic execution mode
telemetry = ["hdrhistogram"]  # Enable performance metrics collection

## Hardware Acceleration
gpu = ["wgpu"]  # Enable GPU offloading (experimental)
numa = ["libnuma"]  # Enable NUMA awareness (Linux only)
energy-aware = []  # Energy-efficient scheduling (future)

## Integration Features
async = ["futures", "async-channel"]  # Enable async/await support
tokio-compat = ["async"]  # Enable Tokio runtime integration

## Experimental Features
custom-allocators = []  # Support for custom allocators (future)

# Internal Features (for development)
__internal_test = []  # Internal testing features
